/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { E1 } from "./E1";
import { E1CountArgs } from "./E1CountArgs";
import { E1FindManyArgs } from "./E1FindManyArgs";
import { E1FindUniqueArgs } from "./E1FindUniqueArgs";
import { DeleteE1Args } from "./DeleteE1Args";
import { E1Service } from "../e1.service";
@graphql.Resolver(() => E1)
export class E1ResolverBase {
  constructor(protected readonly service: E1Service) {}

  async _e1sMeta(@graphql.Args() args: E1CountArgs): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [E1])
  async e1s(@graphql.Args() args: E1FindManyArgs): Promise<E1[]> {
    return this.service.e1s(args);
  }

  @graphql.Query(() => E1, { nullable: true })
  async e1(@graphql.Args() args: E1FindUniqueArgs): Promise<E1 | null> {
    const result = await this.service.e1(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => E1)
  async deleteE1(@graphql.Args() args: DeleteE1Args): Promise<E1 | null> {
    try {
      return await this.service.deleteE1(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
