/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { E1Service } from "../e1.service";
import { E1CreateInput } from "./E1CreateInput";
import { E1 } from "./E1";
import { E1FindManyArgs } from "./E1FindManyArgs";
import { E1WhereUniqueInput } from "./E1WhereUniqueInput";
import { E1UpdateInput } from "./E1UpdateInput";

export class E1ControllerBase {
  constructor(protected readonly service: E1Service) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: E1 })
  async createE1(@common.Body() data: E1CreateInput): Promise<E1> {
    return await this.service.createE1({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [E1] })
  @ApiNestedQuery(E1FindManyArgs)
  async e1s(@common.Req() request: Request): Promise<E1[]> {
    const args = plainToClass(E1FindManyArgs, request.query);
    return this.service.e1s({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: E1 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async e1(@common.Param() params: E1WhereUniqueInput): Promise<E1 | null> {
    const result = await this.service.e1({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: E1 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateE1(
    @common.Param() params: E1WhereUniqueInput,
    @common.Body() data: E1UpdateInput
  ): Promise<E1 | null> {
    try {
      return await this.service.updateE1({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: E1 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteE1(
    @common.Param() params: E1WhereUniqueInput
  ): Promise<E1 | null> {
    try {
      return await this.service.deleteE1({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
