# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Cart {
  cartItems(orderBy: [CartItemOrderByInput!], skip: Float, take: Float, where: CartItemWhereInput): [CartItem!]!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  user: User
}

input CartCreateInput {
  cartItems: CartItemCreateNestedManyWithoutCartsInput
  user: UserWhereUniqueInput
}

input CartCreateNestedManyWithoutUsersInput {
  connect: [CartWhereUniqueInput!]
}

type CartItem {
  cart: Cart
  createdAt: DateTime!
  id: String!
  product: Product
  quantity: Float
  updatedAt: DateTime!
}

input CartItemCreateInput {
  cart: CartWhereUniqueInput
  product: ProductWhereUniqueInput
  quantity: Float
}

input CartItemCreateNestedManyWithoutCartsInput {
  connect: [CartItemWhereUniqueInput!]
}

input CartItemCreateNestedManyWithoutProductsInput {
  connect: [CartItemWhereUniqueInput!]
}

input CartItemListRelationFilter {
  every: CartItemWhereInput
  none: CartItemWhereInput
  some: CartItemWhereInput
}

input CartItemOrderByInput {
  cartId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  updatedAt: SortOrder
}

input CartItemUpdateInput {
  cart: CartWhereUniqueInput
  product: ProductWhereUniqueInput
  quantity: Float
}

input CartItemUpdateManyWithoutCartsInput {
  connect: [CartItemWhereUniqueInput!]
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
}

input CartItemUpdateManyWithoutProductsInput {
  connect: [CartItemWhereUniqueInput!]
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
}

input CartItemWhereInput {
  cart: CartWhereUniqueInput
  id: StringFilter
  product: ProductWhereUniqueInput
  quantity: IntNullableFilter
}

input CartItemWhereUniqueInput {
  id: String!
}

input CartListRelationFilter {
  every: CartWhereInput
  none: CartWhereInput
  some: CartWhereInput
}

input CartOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CartUpdateInput {
  cartItems: CartItemUpdateManyWithoutCartsInput
  user: UserWhereUniqueInput
}

input CartUpdateManyWithoutUsersInput {
  connect: [CartWhereUniqueInput!]
  disconnect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
}

input CartWhereInput {
  cartItems: CartItemListRelationFilter
  id: StringFilter
  user: UserWhereUniqueInput
}

input CartWhereUniqueInput {
  id: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  createCart(data: CartCreateInput!): Cart!
  createCartItem(data: CartItemCreateInput!): CartItem!
  createProduct(data: ProductCreateInput!): Product!
  createUser(data: UserCreateInput!): User!
  deleteCart(where: CartWhereUniqueInput!): Cart!
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem!
  deleteProduct(where: ProductWhereUniqueInput!): Product!
  deleteUser(where: UserWhereUniqueInput!): User!
  updateCart(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart!
  updateCartItem(data: CartItemUpdateInput!, where: CartItemWhereUniqueInput!): CartItem!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Product {
  cartItems(orderBy: [CartItemOrderByInput!], skip: Float, take: Float, where: CartItemWhereInput): [CartItem!]!
  createdAt: DateTime!
  description: String
  id: String!
  name: String
  price: Float
  stock: Float
  updatedAt: DateTime!
}

input ProductCreateInput {
  cartItems: CartItemCreateNestedManyWithoutProductsInput
  description: String
  name: String
  price: Float
  stock: Float
}

input ProductOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  price: SortOrder
  stock: SortOrder
  updatedAt: SortOrder
}

input ProductUpdateInput {
  cartItems: CartItemUpdateManyWithoutProductsInput
  description: String
  name: String
  price: Float
  stock: Float
}

input ProductWhereInput {
  cartItems: CartItemListRelationFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  price: FloatNullableFilter
  stock: IntNullableFilter
}

input ProductWhereUniqueInput {
  id: String!
}

type Query {
  cart(where: CartWhereUniqueInput!): Cart
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItems(orderBy: [CartItemOrderByInput!], skip: Float, take: Float, where: CartItemWhereInput): [CartItem!]!
  carts(orderBy: [CartOrderByInput!], skip: Float, take: Float, where: CartWhereInput): [Cart!]!
  product(where: ProductWhereUniqueInput!): Product
  products(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): [Product!]!
  user(where: UserWhereUniqueInput!): User
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  carts(orderBy: [CartOrderByInput!], skip: Float, take: Float, where: CartWhereInput): [Cart!]!
  createdAt: DateTime!
  email: String
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  carts: CartCreateNestedManyWithoutUsersInput
  email: String
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  carts: CartUpdateManyWithoutUsersInput
  email: String
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  carts: CartListRelationFilter
  email: StringNullableFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}