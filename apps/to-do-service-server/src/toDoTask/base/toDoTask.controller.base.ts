/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ToDoTaskService } from "../toDoTask.service";
import { ToDoTaskCreateInput } from "./ToDoTaskCreateInput";
import { ToDoTask } from "./ToDoTask";
import { ToDoTaskFindManyArgs } from "./ToDoTaskFindManyArgs";
import { ToDoTaskWhereUniqueInput } from "./ToDoTaskWhereUniqueInput";
import { ToDoTaskUpdateInput } from "./ToDoTaskUpdateInput";
import { ToDoUserFindManyArgs } from "../../toDoUser/base/ToDoUserFindManyArgs";
import { ToDoUser } from "../../toDoUser/base/ToDoUser";
import { ToDoUserWhereUniqueInput } from "../../toDoUser/base/ToDoUserWhereUniqueInput";

export class ToDoTaskControllerBase {
  constructor(protected readonly service: ToDoTaskService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ToDoTask })
  async createToDoTask(
    @common.Body() data: ToDoTaskCreateInput
  ): Promise<ToDoTask> {
    return await this.service.createToDoTask({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        dueDate: true,
        id: true,
        status: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ToDoTask] })
  @ApiNestedQuery(ToDoTaskFindManyArgs)
  async toDoTasks(@common.Req() request: Request): Promise<ToDoTask[]> {
    const args = plainToClass(ToDoTaskFindManyArgs, request.query);
    return this.service.toDoTasks({
      ...args,
      select: {
        createdAt: true,
        description: true,
        dueDate: true,
        id: true,
        status: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ToDoTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async toDoTask(
    @common.Param() params: ToDoTaskWhereUniqueInput
  ): Promise<ToDoTask | null> {
    const result = await this.service.toDoTask({
      where: params,
      select: {
        createdAt: true,
        description: true,
        dueDate: true,
        id: true,
        status: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ToDoTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateToDoTask(
    @common.Param() params: ToDoTaskWhereUniqueInput,
    @common.Body() data: ToDoTaskUpdateInput
  ): Promise<ToDoTask | null> {
    try {
      return await this.service.updateToDoTask({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          dueDate: true,
          id: true,
          status: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ToDoTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteToDoTask(
    @common.Param() params: ToDoTaskWhereUniqueInput
  ): Promise<ToDoTask | null> {
    try {
      return await this.service.deleteToDoTask({
        where: params,
        select: {
          createdAt: true,
          description: true,
          dueDate: true,
          id: true,
          status: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/todouser")
  @ApiNestedQuery(ToDoUserFindManyArgs)
  async findTodouser(
    @common.Req() request: Request,
    @common.Param() params: ToDoTaskWhereUniqueInput
  ): Promise<ToDoUser[]> {
    const query = plainToClass(ToDoUserFindManyArgs, request.query);
    const results = await this.service.findTodouser(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        id: true,
        lookup: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/todouser")
  async connectTodouser(
    @common.Param() params: ToDoTaskWhereUniqueInput,
    @common.Body() body: ToDoUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      todouser: {
        connect: body,
      },
    };
    await this.service.updateToDoTask({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/todouser")
  async updateTodouser(
    @common.Param() params: ToDoTaskWhereUniqueInput,
    @common.Body() body: ToDoUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      todouser: {
        set: body,
      },
    };
    await this.service.updateToDoTask({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/todouser")
  async disconnectTodouser(
    @common.Param() params: ToDoTaskWhereUniqueInput,
    @common.Body() body: ToDoUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      todouser: {
        disconnect: body,
      },
    };
    await this.service.updateToDoTask({
      where: params,
      data,
      select: { id: true },
    });
  }
}
