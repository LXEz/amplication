/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ToDoTask as PrismaToDoTask,
  User as PrismaUser,
} from "@prisma/client";

export class ToDoTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ToDoTaskCountArgs, "select">): Promise<number> {
    return this.prisma.toDoTask.count(args);
  }

  async toDoTasks(
    args: Prisma.ToDoTaskFindManyArgs
  ): Promise<PrismaToDoTask[]> {
    return this.prisma.toDoTask.findMany(args);
  }
  async toDoTask(
    args: Prisma.ToDoTaskFindUniqueArgs
  ): Promise<PrismaToDoTask | null> {
    return this.prisma.toDoTask.findUnique(args);
  }
  async createToDoTask(
    args: Prisma.ToDoTaskCreateArgs
  ): Promise<PrismaToDoTask> {
    return this.prisma.toDoTask.create(args);
  }
  async updateToDoTask(
    args: Prisma.ToDoTaskUpdateArgs
  ): Promise<PrismaToDoTask> {
    return this.prisma.toDoTask.update(args);
  }
  async deleteToDoTask(
    args: Prisma.ToDoTaskDeleteArgs
  ): Promise<PrismaToDoTask> {
    return this.prisma.toDoTask.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.toDoTask
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
