/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ToDoTask } from "./ToDoTask";
import { ToDoTaskCountArgs } from "./ToDoTaskCountArgs";
import { ToDoTaskFindManyArgs } from "./ToDoTaskFindManyArgs";
import { ToDoTaskFindUniqueArgs } from "./ToDoTaskFindUniqueArgs";
import { CreateToDoTaskArgs } from "./CreateToDoTaskArgs";
import { UpdateToDoTaskArgs } from "./UpdateToDoTaskArgs";
import { DeleteToDoTaskArgs } from "./DeleteToDoTaskArgs";
import { User } from "../../user/base/User";
import { ToDoTaskService } from "../toDoTask.service";
@graphql.Resolver(() => ToDoTask)
export class ToDoTaskResolverBase {
  constructor(protected readonly service: ToDoTaskService) {}

  async _toDoTasksMeta(
    @graphql.Args() args: ToDoTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ToDoTask])
  async toDoTasks(
    @graphql.Args() args: ToDoTaskFindManyArgs
  ): Promise<ToDoTask[]> {
    return this.service.toDoTasks(args);
  }

  @graphql.Query(() => ToDoTask, { nullable: true })
  async toDoTask(
    @graphql.Args() args: ToDoTaskFindUniqueArgs
  ): Promise<ToDoTask | null> {
    const result = await this.service.toDoTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ToDoTask)
  async createToDoTask(
    @graphql.Args() args: CreateToDoTaskArgs
  ): Promise<ToDoTask> {
    return await this.service.createToDoTask({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ToDoTask)
  async updateToDoTask(
    @graphql.Args() args: UpdateToDoTaskArgs
  ): Promise<ToDoTask | null> {
    try {
      return await this.service.updateToDoTask({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ToDoTask)
  async deleteToDoTask(
    @graphql.Args() args: DeleteToDoTaskArgs
  ): Promise<ToDoTask | null> {
    try {
      return await this.service.deleteToDoTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: ToDoTask): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
