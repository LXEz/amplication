# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum EnumTaskStatus {
  Option_1
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  createProject(data: ProjectCreateInput!): Project!
  createTask(data: TaskCreateInput!): Task!
  createUser(data: UserCreateInput!): User!
  deleteProject(where: ProjectWhereUniqueInput!): Project!
  deleteTask(where: TaskWhereUniqueInput!): Task!
  deleteUser(where: UserWhereUniqueInput!): User!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Project {
  createdAt: DateTime!
  description: String
  id: String!
  name: String
  tasks(orderBy: [TaskOrderByInput!], skip: Float, take: Float, where: TaskWhereInput): [Task!]!
  updatedAt: DateTime!
}

input ProjectCreateInput {
  description: String
  name: String
  tasks: TaskCreateNestedManyWithoutProjectsInput
}

input ProjectOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ProjectUpdateInput {
  description: String
  name: String
  tasks: TaskUpdateManyWithoutProjectsInput
}

input ProjectWhereInput {
  description: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  tasks: TaskListRelationFilter
}

input ProjectWhereUniqueInput {
  id: String!
}

type Query {
  project(where: ProjectWhereUniqueInput!): Project
  projects(orderBy: [ProjectOrderByInput!], skip: Float, take: Float, where: ProjectWhereInput): [Project!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(orderBy: [TaskOrderByInput!], skip: Float, take: Float, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Task {
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  id: String!
  project: Project
  status: EnumTaskStatus
  title: String
  updatedAt: DateTime!
}

input TaskCreateInput {
  description: String
  dueDate: DateTime
  project: ProjectWhereUniqueInput
  status: EnumTaskStatus
  title: String
}

input TaskCreateNestedManyWithoutProjectsInput {
  connect: [TaskWhereUniqueInput!]
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

input TaskOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  dueDate: SortOrder
  id: SortOrder
  projectId: SortOrder
  status: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input TaskUpdateInput {
  description: String
  dueDate: DateTime
  project: ProjectWhereUniqueInput
  status: EnumTaskStatus
  title: String
}

input TaskUpdateManyWithoutProjectsInput {
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
}

input TaskWhereInput {
  description: StringNullableFilter
  dueDate: DateTimeNullableFilter
  id: StringFilter
  project: ProjectWhereUniqueInput
  status: EnumTaskStatus
  title: StringNullableFilter
}

input TaskWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  email: String
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  email: String
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  email: StringNullableFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}